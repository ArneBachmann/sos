import enum, sys
from typing import Dict, Tuple
import pure
try: import sos.version as version
except: import version
try: from pyfiglet import Figlet
except: Figlet = None

# Constants
APP:str = "Subversion Offline Solution"
APPNAME:str = APP + " V%s (C) Arne Bachmann" % version.__release_version__
COMMAND:str = "sos"
MARKER:str = r"/SOS/ "


Category = enum.Enum("Category", {
  "Repository_handling": 2,
  "Working_with_branches": 4,
  "Working_with_files": 6,
  "Defining_file_patterns": 8,
  "Further_commands": 10
})

data Text(short:str, long:str)

data Command(category:Category, arguments:List[Text], short:str, long:str)


COMMANDS:Dict[str,Command] = {
  "offline": Command(Category.Repository_handling,
    [
      Text("[<name>", "Name of the initial branch to use. Default: determined by the type of the underlying VCS"),
      Text("[<message>]]", "Initial commit message. Default: A timestamp")
    ], "Prepare working offline with SOS, creating an initial branch from the current file tree",
    """Creates the offline repository metadata in a folder '.sos/' relative to the current working directory.
       The existence of this metadata folder marks the root for the offline SOS repository"""
  ),
  "online": Command(Category.Repository_handling, [],
    "Finish working online, removing the SOS repository's metadata folder",
    """The user is warned if any branches remain that have not been committed/pushed to the underlying VCS.
       If not, or using the '--force'  option, the './sos' folder is removed entirely.
       SOS will serve again only as a pass-through command for the original underlying VCS in that folder"""
  ),
  "dump": Command(Category.Repository_handling,
    [
      Text("[<path>/]<name[.sos.zip]>", "File name for the exported repository archive dump")
    ], "Perform repository dump into an archive file",
    """The archive will contain only the metadata folder, not the file tree.
       After unzipping the archive, the file tree can be easily restored to the latest revision with 'sos switch /'"""
  )
}

OPTIONS:Dict[str,Dict[str?,str]] = {  # option -> command or all -> description
  "sos": {
    None: "Pass command and options to SOS, even when not offline, e.g. 'sos --sos config add texttype \"*.md\"'"
    },
  "vcs": {
    None: "Pass command and options to underlying VCS, even in offline mode, e.g. 'sos --vcs add test.md' for Git"
  },
  "compress": { "offline": """Compress all hence versioned files instead of simply copying them verbatim.
                 May be significantly slower, but reduces storage overhead.
                 Same as going offline after 'sos config set compress on'"""
  },
  "track": { "offline": """Defines repository mode to use SVN-like file handling per tracking patterns.
             Tracking patterns are added to or removed from a branch via 'sos add' and 'sos rm'; files can be moved and renamed via 'sos mv'"""
  },
  "picky": { "offline": """Defines repository mode to use Git-like file handling per staging patterns.
               Staging patterns are added to or removed from a branch via 'sos add' and 'sos rm'; files can be moved and renamed via 'sos mv'"""
  },
  "strict": {
    None: """Perform the command using file contents instead of relying on modification timestamp.
             File sizes are always compared in both modes""",
    "offline": """Defines repository property to always compare file contents instead of relying on modification timestamp.
                  File sizes are always compared in both modes.
                  Cannot be changed via user interface after repository creation.
                  Most commands, however, support a '--strict' option nevertheless"""  # TODO change if repo properties command exists
  },
  "force": {
    None: """Executes potentially harmful operations, telling SOS that you really intend to perform that command.
             Most commands: Ignore uncommitted branches, continue to remove SOS repository metadata folders """,
    "offline": """If already in offline mode, remove offline repository first before creating empty offline repository anew""",
    "online": """Ignore uncommitted branches, continue to remove SOS repository metadata folder"""
  },
  "full": {
    "dump": """Force a full repository dump instead of a differential export""",
  },
  "skip-backup": {
    "dump": "Don't create a backup of a previous dump archive before dumping the repository"""
  }
}

def getTitleFont(text:str, width:int) -> Tuple[str,str] =
  x:List[Tuple[int,str]] = sorted(t for t in [(max(len(_) for _ in Figlet(font = f, width = 999).renderText(text).split("\n")), f) for f in ["big", "modular", "bell", "nscript", "pebbles", "puffy", "roman", "rounded", "santaclara", "script", "small", "soft", "standard", "univers", "thin"]] if t[0] <= width)
  if len(x) == 0: text = MARKER
  (text, sorted(t for t in [(max(len(_) for _ in Figlet(font = f, width = 999).renderText(text).split("\n")), f) for f in ["big", "modular", "bell", "nscript", "pebbles", "puffy", "roman", "rounded", "santaclara", "script", "small", "soft", "standard", "univers", "thin"]] if t[0] <= width)[-1][1])

def getTitle(large:bool = True) -> str?:  # https://github.com/pwaller/pyfiglet/blob/master/doc/figfont.txt
  ''' Large: ascii-art, short: leave out copyright notice. '''
  if not large or not Figlet: return None
  text, font = getTitleFont(APP, width = pure.termWidth)
  try: return "\n".join(_ for _ in Figlet(font = font, width = pure.termWidth).renderText(text).split("\n") if _.replace(" ", "") != "")
  except: return None

def _stripSplit(s:str) -> str = [_.strip() for _ in s.replace("\r", "").split("\n")]

def usage(argument:str, short:bool = False):
  title:str? = getTitle()
  if title: print(title + "\n")
  print("{marker}{appname}{version}\n".format(marker = MARKER, appname = APPNAME, version = "" if not short else " (PyPI: %s)" % version.__version__))
  category:Category? = {"repo": Category.Repository_handling, "branches": Category.Working_with_branches, "files": Category.Working_with_files, "patterns": Category.Defining_file_patterns, "rest": Category.Further_commands}.get(argument, None)
  command:str? = argument if category is None else None
  for _value, category in sorted([(_.value, _.name) for _ in list(Category)]) if category is None else [(None, category.value)]:  # over one or all categories
    if command is None: print("%s:" % category.replace("_", " "))  # TODO also print category if given a specific command?
    ofcategory:Dict[str,Command] = {command_: values for command_, values in COMMANDS.items() if values.category == Category[category] and (command is None or command_ == command)}  # select commands from chosen category
    if len(ofcategory) == 0: continue
    for name, cmd in sorted(ofcategory.items()):
      comd:str = "  %s %s  " % (name, " ".join([c.short for c in cmd.arguments]))
      print("%s\n%s" % (comd + cmd.short, pure.ajoin(" " * len(comd), _stripSplit(cmd.long), nl = "\n")))
      if short: continue
      maxlen:int = 4 + 2 + max(len(s.short) for s in cmd.arguments) if len(cmd.arguments) > 0 else 0
      for c in cmd.arguments: print(pure.ljust("    %s  " % c.short, maxlen) + c.long)
      matchingoptions:Dict[str, str] = {} if cmd is None else {optname: _stripSplit(dikt[None]) if None in dikt else [] for optname, dikt in OPTIONS.items()}  # add all text for the generic explanation
      for optname, explanation in [(optname, dikt[name]) for optname, dikt in OPTIONS.items() if name in dikt]: matchingoptions[optname].extend(_stripSplit(explanation))  # add all lines for the specifc explanation
      if len(matchingoptions) == 0: continue  # with next command
      maxoptlen:int = max([len(optname) for optname in matchingoptions])
      for optname, explanations in sorted(matchingoptions.items()):
        if len(explanations) == 0: continue
        print("    --%s  %s%s" % (pure.ljust(optname, maxoptlen), explanations[0], "\n" + pure.ajoin(" " * (6 + maxoptlen + 2), explanations[1:], nl = "\n") if len(explanations) > 1 else ""))

  if False: print("""

Usage: {cmd} <command> [<argument>] [<option1>, ...]        When operating in offline mode, or command is one of "help", "offline", "version"
       {cmd} <underlying vcs command and arguments>         When operating in online mode, automatic passthrough to traditional VCS

    log                                                   List commits of current branch
      --changes                                             Also list file differences
      --diff                                                Also show textual version differences
    status [<branch>][/<revision>]                        Display changed paths vs. last or specified revision on current or specified branch
    status --repo                                         List branches and display repository status

    branch [<name> [<message>]]                           Create a new branch from current file tree and switch to it
      --last                                                Use last revision, not current file tree, but keep file tree unchanged
      --stay                                                Don't switch to new branch, continue on current one
      --fast                                                Using the reference branching model (experimental)
    destroy [<branch>]                                    Remove (current or specified) branch entirely
    switch [<branch>][/<revision>]                        Continue work on another branch
      --meta                                                Only switch file tracking patterns for current branch, don't update any files
    update [<branch>][/<revision>]                        Integrate work from another branch
      --add       | --rm       | --ask                      Only add new files / only remove vanished files / Ask what to do. Default: add and remove
      --add-lines | --rm-lines | --ask-lines                Only add inserted lines / only remove deleted lines / Ask what to do. Default: add and remove
      --add-chars | --rm-chars | --ask-chars                Only add new characters / only remove vanished characters / Ask what to do. Default: add and remove
      --eol                                                 Use EOL style from the integrated file instead. Default: EOL style of current file

    commit [<message>]                                    Create a new revision from current state file tree, with an optional commit message
      --tag                                                 Memorizes commit message as a tag that can be used instead of numeric revisions
    diff [<branch>][/<revision>]                          List changes in file tree (or `--from` specified revision) vs. last (or specified) revision
      --to=branch/revision                                  Take "to" revision as target to compare against (instead of current file tree state)
      --ignore-whitespace | --iw                            Ignore white spaces during comparison
      --wrap                                                Wrap text around terminal size instead of shortening
    changes
    ls [<folder path>]                                    List file tree and mark changes and tracking status
      --patterns                                            Only show tracking patterns
      --tags                                                List all repository tags (has nothing to do with file or filepattern listing)
      --recursive | -r                                      Recursively list also sub-folders
      --all | -a                                            Recursively list all starting from repository root

    add[not] <file pattern>                               Add a tracking pattern to current branch (file pattern). Using addnot adds to tracking blacklist
    rm[not]  <file pattern>                               Remove a tracking pattern. Only useful after "offline --track" or "offline --picky"
    mv[not]  <oldpattern> <newPattern>                    Rename, move, or move and rename tracked files according to tracked file patterns
      --soft                                                Don't move or rename files, only the tracking pattern

  More commands:
    help, --help                                          Show this usage information
    version                                               Display version and package information

  User configuration:
    config [set/unset/show/add/rm] [<param> [<value>]] [--local]  Configure user-global or repo-local defaults.
                                                                  Flags (1/0, on/off, true/false, yes/no):
                                                                    strict, track, picky, compress
                                                                  Removing the last entry from a local list will not remove the empty list.
                                                                  Combine with sos config rm <key> <value> --local --prune or sos unset <key> --local
                                                                  Lists (semicolon-separated when set; single values for add/rm):
                                                                    texttype, bintype, ignores, ignoreDirs, ignoresWhitelist, ignoreDirsWhitelist
                                                                  Supported texts:
                                                                    defaultbranch (has a dynamic default value, depending on VCS discovered)
    config show|list flags|lists|texts                    Enumerates all configurable settings for specified type
    config show <key>                                     Displays only single value

  Arguments:
    [<branch>][/<revision>]      Revision string. Branch is optional (defaulting to current branch) and may be a label or number >= 0
                                 Revision is an optional integer and may be negative to reference from the latest commits (-1 is most recent revision), or a tag name

  Common options:
    --progress                   Display file names during file tree traversal, and show compression advantage, if enabled
    --only   <tracked pattern>   Restrict operation to specified pattern(s). Available for "changes", "commit", "diff", "switch", and "update"
    --except <tracked pattern>   Avoid operation for specified pattern(s). Available for "changes", "commit", "diff", "switch", and "update"
    --{cmd}                      When executing {CMD} not being offline, pass arguments to {CMD} instead (e.g. {cmd} --{cmd} config set key value.)
    --log                        Enable logging details
    --verbose                    Enable verbose output, including show compression ratios""".format(appname = APPNAME, cmd = COMMAND, CMD = COMMAND.upper()))
  sys.exit(0)
