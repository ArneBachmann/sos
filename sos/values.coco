# Copyright Arne Bachmann
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

from typing import Dict, List
try: import enum
except: raise Exception("SOS requires the enum module (Python 3.4+). You may try to manually install it via 'pip install enum34' or use 'pip install -U sos-vcs[backport]'")


# Enums
MergeOperation = enum.Enum("MergeOperation", {"INSERT": 1, "REMOVE": 2, "BOTH": 3, "ASK": 4})  # insert remote changes into current, remove remote deletions from current, do both (replicates remote state), or ask per block
MergeBlockType = enum.Enum("MergeBlockType", "KEEP INSERT REMOVE REPLACE MOVE")  # modify = intra-line changes, replace = full block replacement


# Value types
data BranchInfo(
    number:int,  # the branch's number, starting with zero, corresponding to the Metadata.branches map key
    ctime:int,  # timestamp of creation in rounded ms
    name:str? = None,  # optional branch name
    inSync:bool = False,  # marker for modifications since branching
    tracked:List[str] = [],  # tracked file patterns. on purpose as a list (instead of set), because easier for JSON and there is no frequent in-memory access
    untracked:List[str] = [],  # blacklist for tracking patterns
    parent:int? = None,  # if not None, this is the parent branch branched from
    revision:int? = None  # if not None, this is the parent branch's revision branched from
  )

data CommitInfo(
    number:int,  # then commit's number, starting with zero, corresponding to the Metadata.commits map key
    ctime:int,  # timestamp of creation in rounded ms
    message:str? = None  # optional commit message (or tag name)
  )

data PathInfo(nameHash:str, size:int?, mtime:int, hash:str?)  # size == None means deleted in this revision; mtime = int(1000 * epoch)
data ChangeSet(additions:Dict[str,PathInfo], deletions:Dict[str,PathInfo], modifications:Dict[str,PathInfo], moves:Dict[str,Tuple[str,PathInfo]])  # avoid default assignment of {} as it leads to runtime errors (contains data on init for unknown reason)
data Range(tipe:MergeBlockType, indexes:int[])  # MergeBlockType[1,2,4], line number, length  # TODO use enum
data MergeBlock(tipe:MergeBlockType, lines:List[str], line:int, replaces:MergeBlock? = None, changes:Range? = None)
data GlobBlock(isLiteral:bool, content:str, index:int)  # for file pattern rename/move matching
data GlobBlock2(isLiteral:bool, content:str, matches:str)  # matching file pattern and input filename for translation
