# Copyright Arne Bachmann
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

import math
from typing import Any, FrozenSet, List, Tuple
try:
  import wcwidth  # optional dependency for unicode support
  def wcswidth(string:str) -> int =
    l:int = wcwidth.wcswidth(string)
    len(string) if l < 0 else l
except: wcswidth:(str) -> int = len

KIBI:int = 1 << 10
MEBI:int = 1 << 20
GIBI:int = 1 << 30

_SECOND:int = 1000
_MINUTE:int = _SECOND * 60
_HOUR:int = _MINUTE * 60
_DAY:int = _HOUR * 24
_WEEK:int = _DAY * 7


# "Pure" functions
def unzip(lizt:List[Tuple[Any]]) -> Tuple[List[Any]] =
  zip(*lizt)

def sjoin(*s:Tuple[Any]) -> str = " ".join([str(e) for e in s if e != ''])

def ajoin(sep:str, seq:str[], nl:str = "", first:bool = True) -> str = ((sep if first else "") + (nl + sep).join(seq)) if seq else ""

def requiredDecimalDigits(number:int) -> int =
  1 if number <= 0 else int(math.floor(round(math.log(number, 10), 6)) + 1)

def conditionalIntersection(a:FrozenSet[str]?, b:FrozenSet[str]) -> FrozenSet[str] = a & b if a else b  # Used to match only arguments, or use only stored patterns

def getTermWidth() -> int =
  try: import termwidth
  except: return 80  # HINT could be factored out, or even increased for most modern systems
  termwidth.getTermWidth()[0]

# Global variable
termWidth = getTermWidth() - 1  # uses curses or returns conservative default of 80

def ljust(string:str = "", width:int = termWidth) -> str =
  assert width > 0
  string + " " * max(0, width - wcswidth(string))

def splitStrip(string:str) -> List[str] = [_.strip() for _ in string.replace("\r", "").split("\n")]

def signedNumber(number:int, filled:bool = False) -> str =
  ''' Always returns the sign. '''
  "+" if number > 0 else ("-" if number < 0 else (" " if filled else ""))

def siSize(size:int) -> str =
  ''' Returns formatted number with SI unit. '''
  "%.2f MiB" % (float(size) / MEBI) if size > 1.25 * MEBI else ("%.2f KiB" % (float(size) / KIBI) if size > 1.25 * KIBI else ("%d bytes" % size))

def timeString(timeMs:int) -> str =
  ''' Returns formatted time with unit. '''
  "%.1f weeks" % (float(timeMs) / _WEEK) if timeMs > 8. * _WEEK / 7 else (
  "%.1f days" % (float(timeMs) / _DAY) if timeMs > 1.125 * _DAY else (
  "%.1f hours" % (float(timeMs) / _HOUR) if timeMs > 1.5 * _HOUR else (
  "%.1f minutes" % (float(timeMs) / _MINUTE) if timeMs > 1.5 * _MINUTE else (
  "%.1f seconds" % (float(timeMs) / _SECOND) if timeMs > 1.5 * _SECOND else (
  "%d ms" % timeMs)))))

def median(values:List[Union[int,float]], inplace:bool = False):
  ''' TODO Use doctest here.
  >>> print(median([1, 2, 3]))
  2
  >>> print(median([1, 2]))
  1.5
  '''
  assert isinstance(values, list)
  n:int = len(values)
  assert n > 0
  if n == 1: return values[0]
  if inplace: values.sort()
  else: values = list(sorted(values))  # get copy
  return values[n>>1] if (n>>1)<<1 != n else (values[(n>>1) - 1] + values[(n>>1)]) / 2.0

def appendEndmarkerIterator(i:Iterable, end:Any = lambda count, value: (count, value), endValue:Any = None):
  '''
  >>> print(list(appendEndmarkerIterator(enumerate(iter(range(3))))))
  [(0, 0), (1, 1), (2, 2), (3, None)]
  '''
  count:int = 0
  try: while True: yield next(i); count += 1
  except: yield end(count, endValue)
