# Copyright Arne Bachmann
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

import math
from typing import Any, FrozenSet, List, Tuple
try:
  import wcwidth  # optional dependency for unicode support
  def wcswidth(string:str) -> int =
    l:int = wcwidth.wcswidth(string)
    len(string) if l < 0 else l
except: wcswidth:(str) -> int = len


# "Pure" functions
def sjoin(*s:Tuple[Any]) -> str = " ".join([str(e) for e in s if e != ''])

def ajoin(sep:str, seq:str[], nl:str = "", first:bool = True) -> str = ((sep if first else "") + (nl + sep).join(seq)) if seq else ""

def requiredDecimalDigits(number:int) -> int =
  1 if number <= 0 else int(math.floor(round(math.log(number, 10), 6)) + 1)

def conditionalIntersection(a:FrozenSet[str]?, b:FrozenSet[str]) -> FrozenSet[str] = a & b if a else b  # Used to match only arguments, or use only stored patterns

def getTermWidth() -> int =
  try: import termwidth
  except: return 80  # HINT could be factored out, or even increased for most modern systems
  termwidth.getTermWidth()[0]

# Global variable
termWidth = getTermWidth() - 1  # uses curses or returns conservative default of 80

def ljust(string:str = "", width:int = termWidth) -> str =
  assert width > 0
  string + " " * max(0, width - wcswidth(string))

def splitStrip(string:str) -> List[str] = [_.strip() for _ in string.replace("\r", "").split("\n")]
